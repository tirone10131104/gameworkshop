2017-11-6
    （1）数据区块模板，数据存储结构tb_datablock_templet的datablock字段更改为指向tb_datablock的OID ，数据存储不再在模板表中完成  (OK)
    
   （2） GUI部分，基于上述修改。就实现一个数据区块模板编辑和查看的功能 (OK)

      （3）  基于数据区块模板编辑和查看，完成物体模板的编辑和查看功能  (OK)

       （4） 因为已经加入了KEYDATA模块，所以，建造，拆分，使用需求类型的数据区块的目标内容应该包含选择KEYDATA。 （OK）

        
2017-11-7
    （1）   MDIPaneControl，修改结构，使其能够使用单一的一组函数，适应多重类型的MDI窗体逻辑管理 (OK)

    (2)   *  tb_items 增设equipment控制是否为装备，slotType控制插槽编码，slotSize控制插槽空间
          *      字段equipLimit，用于限制装备的最大数量，不可超过。
          *      注意，只有tb_items为实物体的适合，上述字段的内容才为有效值
          *      （该备忘已经被2017-11-8（1）（2）取代。）

    （3）   增设tbg_ship_model_define，对舰船的基本数据进行编辑和存储 (OK)


    （4）   有关舰船或其他可装备物的模板，需要制作一个ADT，用于控制灵活装配，每项配置包含 （装配类型、槽位、数量、尺寸、物体集合，单项物体最大数量）
            这个ADT可以配置为datablock，为舰船等可被装配类型物体的专用系统级数据区块。   (OK)

     （5）  舰船，使用的数据区块包括，属性、效果、建造、拆卸、使用需求、装配列表（参考备忘4） (OK)

     （6）  计划增设一种数据区块，用于定义主动功能列表，每个功能包含内容（信息，使用需求条件，作用周期，效果列表，反应器列表）
            反应器是一组动作定义，除了几种系统预设的反应以外，多半由接口开发控制。
            
     
2017-11-8
    (1)     对装备体系重新思考，现有常量式的装备体系，不灵活，扩展不方便，而且逻辑是靠程序写死，检查和使用都不可后续定制
            增设tb_item_equip_struct，对装备的装配体系进行管理，同时增加级别内排序能力，暂时不限制级别数量，但推荐为2或3级
            通常第一级，指定装配的目标，被装备的物体类型
                第二级，指定装配的类型，部位，用以区分要装备类型
                第三级，指定装配的限制类型，用于精细区分装备的类型。   (OK)
                
    （2）   装备体系引入到物体管理体系中。有关物体的基本数据，管理面板，基本数据操作对话框增设内容，控件逻辑关联关系等需要进行适应性修改。  （OK）

    (3)     物品系统，现在数据量已经足够复杂。除了数据区块列表的模板外，还应该增设【以该物体为模板创建】物体的功能

    
2017-11-15
    (1)     增设一种数据区块配置。用于完成对2017-11-7 （6）的设想
            有关设计，已经落在活页夹上了

    （2）   增设一套管理模块，用于统一接口类型管理和注册管理
            tb_interface_define 用于接口定义
            tb_interface_register 用于接口注册


2017-11-29
     已经完成
        接口定义，接口实现注册
        元数据定义，元数据值列表
        以上包含GUI

       现阶段，根据元数据的设计思路，还需要一套元数据计算器定义功能。用来规约标准的元数据计算接口实现。<不做>
        

2017-12
    itemDefine的后台逻辑验证没有完成

2017-12-11
    数据库增设表 技能系统初始化
    tb_skill_define 用于定义技能系统的全部结构及其基本信息
    tb_skill_level  用于定义技能的各个级别
    tb_skill_serial 用户定义技能系统的系列。
    
    技能的系列，为对程序用户的一个归纳接口。用于读取一个系列的技能
    
    技能结构
        基本数据定义，名称和类型等，技能类型包括（主动，被动），以及绑定KEY
            数据区块包括，技能定义块 ，技能定义块内容包含（前置技能，描述区块*），级别
        
        技能级别包含该技能的每个分级节点。每个分级才是技能的功能定义位。
            数据区块包括，功能区块和描述区块*
        
        运行时，技能需要分对象，分目标进行存放池管理


2018.4.27
    foundation部分有几处需要修改的
    1.ObjectClass部分，加入了物类配置数据，并加入了strictConfig用于控制所属物体的基本配置(ok)
    2.item定义，加入了BOC配置数据的导入(ok)
    3.在BOC和ITEM中，equipType和slotType,slotIndex不成体系，且equipType和用于表达装配根目录的equipRoot名称相近，易产生混淆。
        因此equipType字段更名为slotRoot。
        修改面包括，objectClass和itemDefine 
        (ok)
    4.objectClass的操作面板，对popmenu的支持加入。手感，手感！！(ok)
    5.propertyDefine的操作面板，对树和表加入popmenu.手感，手感！！(ok)
            ---发现REVERT / DESTROY PROP的功能没实现GUI。
            

2018.5.2
    *1.比较重要的一个问题，接口体系模型里，同一个程序功能的实现，可能会考虑多种接口模式，以便适应不同的场景和要求。
        当前的接口实现体系里，只针对了接口定义和实现的对应关系，但是对功能的接口框架部分还没有进行充分开发。
        因此在这里，对接口体系进行一个扩展。
        新增一个接口集列表。用一个标签或ID，以指定一系列的接口。
        其他需要使用接口的程序，按照这个接口集，进行扩展实现接口，就不必拘泥于完全相同的格式，而是可以根据需要进行接口模式的选择。
        在实际运行时，接口调度程序还是按照实例指定的程序进行调度，与上层定义时的接口类型和接口集无关。
        也就是说，接口集仅用来增大目标接口的类型，和规范目标接口的类型。
        所以，在接口定义时，程序根据需求，进行接口集的使用。
        增加，tb_prog_interface_set ,以及对应的程序。
        ******进度{数据库（OK）bean（OK）程序（OK）GUI-INVK（） GUI-PAL（）GUI-DLG（）}
    *2.建立在接口集模型的基础之上。对FOE引擎的beatConfig中的各种扩展接口调度使用接口集进行规范。
        起到避免胡乱实现接口，以及扩大同一种类功能的实现方法。
        接口集的配置，固化在现有程序之中。

2018.5.8
    *1 FOE心跳系统之前已经设计出来，但是有部分内容调整较大
    *2 FOE完整体系结构，包括iFOEThreadConfigNode的系统结构。
    *3 FOE体系中包含（心跳，轴线程，堆任务处理，队列任务处理）根据想法，还加入一种实际的计划任务模式。（SCHEDULE）



2018.5.16
    *1  FOE的BEAT线程配置程序完成，经过BEAT模块的开发验证了FOE配置和管理部分的设计想法
    *2  FOE的原先定的轴线程AXIS THREAD，经过思考，决定更名为向量线程，VECTOR_THREAD，以表达有强烈的指向性，顺序和过程。
        更改常量和其他描述信息

2018.5.17
    接口实现的数据中，加入一个字段regName，用于对接口实现做简单描述文本。原description的文本，作为详细文档进行记录


-------
很遗憾，FOE实际上不是一个好的设计方案
过于复杂，但是并非完成目标任务的最优方案。
MCE引擎用于一定程度上替代FOE引擎原先设计目标的一小部分。
MCE主要用于完成一个快速的定时器任务，任务的区间最大为1秒。
属于相对较高频度的任务处理和分发引擎。
MCE分发任务过程，属于较为自然的处理模式，如果任务的TICK是阻塞的，则MCE引擎会为其等候，降低TPS处理效率
如果任务TICK是多线程异步模式，则任务处理线程的生命周期交由任务自己解决处理
-------

2019.1备忘
    1
    物体定义数据库，因为equipData数据量庞大，加上items数据本身也很丰富。
    所以把定义数据和实体定义数据分离。增设tb_datapack表单独存储复杂文本数据
    原ITEMS表，equipData更改为BIGDATA字段。
    2
    把物体定义的数据存储器，改为JDBSession

----
2019.1备忘2
    1 OK
    将tb_datablock的类型字段删除，使其与tb_datapack具有一样的结构。
    tb_datablock - OID字段更改为long,数据字段更改为bigint

    2 OK
    删除tb_datapack的应用。
    
    3   OK
    将物体定义部分的header数据，也就是equipData改为使用 tb_datablock

    4 OK
    dabablockService更新为使用JDBSesssion
     
-----------
2019.1
      MDB设计内容简述
    使用MDBPackage对数据进行封装，相当于包裹层
    MDB只对MDBPackage进行管理，内容包括注册，修改和移除。
    其余业务逻辑层的问题，应在调用MDB操作前解决，MDB不含业务逻辑的操作。
    
    DSS设计内容简述
    DSS是一套用于与MDB系统关联，并进行异步实体化操作的数据存储组件。
    DSS存储机制分两种模式进行
    1   基于命令队列
    2   基于DSS自身轮询脏数据队列并自行判断存储的机制
    
