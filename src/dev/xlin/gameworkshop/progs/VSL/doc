VSL系统旨在实现一个可视化的编程语言。

编程语言核心实现为部分面对对象方式。基本语言系统与JAVA相近，且具备强类型特征。
按目前的设计水平，语言初步实现为部分面对对象，实现类与实例的关系。
在类的设计层面上，还需支持接口模型，这是一个重要的模式，必须予以支持。
语言的基本元素，以类为基本语言框架，类包含成员和方法。
类的成员为基本变量和其他类实例。
方法为类自身定义的子程序，含自定义和接口约定两种。
类成员和方法均含两种访问权限，一是公开方法，实例化以后为外部可用，二是私有方法，实例化后仅内部可用。
类实例化入口为构造函数，为类指定同名方法，依据方法重载特性，可用对构造器重载。

基本语法
变量和常量为通用的最基本单元。数据类型支持三种经典类型，包括整数，浮点数和字符串。分别对应JAVA语言的int ,double , String。
因此数据类型的边界条件和互相转换机制是与JAVA语言具有一致性。
表达逻辑的数据类型为布尔型，对应JAVA语言的boolean类型。

生命周期
    原则上与JAVA的周期系统一致，并具备GC能力。

表达式
算数表达式为一段紧凑的运算指令，运算符号含加减乘除模五种基本算数类型，并含括号运算级体系。
    算数表达式的最小单元均为二元表达式。
    二元表达式两侧要求数据类型基本一致，也就是整数浮点为一致性，字符串和布尔型各为一致。 
逻辑表达式为一段紧凑的逻辑判断指令，判断指令为大于，小于，等于，大于等于，小于等于，不等于，六种基本逻辑判断。
    判断单元均为二元，二元两侧均为算数表达式或者逻辑表达式，两侧不可为不同表达式类型。
    逻辑表达式判断单元之间由逻辑符号连接，形成混合逻辑判断。逻辑符号包括与，或，非三种。
    逻辑表达式可以用括号支持层级关系。
表达式执行顺序
    算数表达式
        优先执行最内层括号的表达式
        同优先级表达式，按照乘除模先算，后算加减法的规则执行。
    逻辑表达式
        优先执行最内层括号内的表达式
        同优先级表达式，按照从左至右的顺序执行。
        先执行逻辑判断，再将结果进行逻辑符号的判断。
运算成员调用
    表达式两侧均支持方法调用返回值。调用可以是本类实例内的成员方法，也可以是类成员实例，或临时生成实例的共有成员方法。
    支持方法链调用。
    要求方法调用，或者方法链调用的最左侧返回值类型与运算单元的另一侧数据类型有一致性。
    表达式单元二元两侧可以同时为方法和方法链调用。
    当出现方法调用的时候，优先对方法进行执行，求出结果。

赋值表达式
    赋值表达式为二元结构。
    赋值表达式的运算规则为将右侧的值赋予左侧的变量。位于左侧的一定是基本数据类型的变量。
    左侧不能够是算数和逻辑表达式。左侧可以是直接指明的生命周期内的变量常量，以及类成员变量，以及实例的公有变量。
    右侧是一个与左侧数据类型具有一致性的算数表达式，或者逻辑表达式，以及方法链。
    

程序基本结构
顺序模式
    按语句正常流向执行，一行执行完成，执行下一行。
分支模式
    按条件进行选择，为T则执行当前指定区块，为F则向后继续执行。
循环模式
    设定一个循环开始标志，并附带一个循环结束的判断条件语句块。
    当判断语句块的执行结果为T，则执行被循环包含的区块，完成后继续执行判断条件区块。
    当判断条件区块的执行结果为F的时候，脱离循环，继续向后执行。

    